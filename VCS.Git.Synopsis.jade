doctype html
html(lang="en")
  head
    title VCS Git Synopsis
    meta(charset="utf-8")
    meta(http-equiv="X-UA-Compatible" content="IE=edge")
    meta(name="viewport" content="width=device-width, initial-scale=1")
    link(href="css/bootstrap.min.css" rel="stylesheet")
    style(type="text/css").
      .color-back-black {
        background-color : rgb(0, 0, 0);
      }
      .color-text-white {
        color : #ffffff;
      }
      h1, h2, h3 {
        margin-top    : 0;
        margin-bottom : 0;
        color         : #F29C00;
        background-color: #000000;
        font-size: 25px;

      }
      .text-color-black {
        color:#000000;
      }
      .text-whitespaces {
        white-space : pre;
      }

      .h2, h2 {
        font-size : 20px;
      }
      /*.collapsing{color : rgb(169, 169, 169) }*/
      [data-toggle]:hover {
        text-decoration : underline;
      }
      [data-toggle] {
        color            : #ffffff;
        background-color : #2d2d2d;
      }
      .collapse.in:hover {
        background-color : #f8f8f8 }
      ::-webkit-scrollbar {
        width    : 2px;
        position : fixed;
      }
      ::-webkit-scrollbar-track {
        width         : 2px;
        border-radius : 10px;
      }
      ::-webkit-scrollbar-thumb {
        border-radius    : 10px;
        background-color : #F29C00;
      }
      body {
        min-height : 1200px;
        max-width  : 900px;
      }
  body.container.dl-horizontal
    h1      SUMMARY
    H2(data-toggle="collapse" data-target="#Preface"  aria-controls="Preface").
            Preface
    div(id="Preface").collapse
      dt    Description:
      dd
        |   Here a small review of my some collected notes based on the
        a(href="http://git-scm.com/book/en/v2")  GIT Book (v2.0),
      dt    Version:
      dd    2.0
      dt    Author:
      dd
        a(href="https://github.com/AlexNeodim") Alex Neodim
    H1      1.      Getting started.
    H2(data-toggle="collapse" data-target="#13"  aria-controls="13").
            1.3.    Git Basics.
    div(id="13").collapse
      dt    Snapshots.
      dd.
            Every time you commit, or save the state of your project in Git,
            it basically takes a picture of what all your files look like at that moment
            and stores a reference to that snapshot (if files have not changed,
      dd.
            Git doesn't store the file again (like others VCSs),
            just a link to the previous identical file it has already stored.)
      dd    Git thinks about its data more like a stream of snapshots.
      dt    Nearly Every Operation Is Local.
      dd.
            Git only need local files and resources to operate unlike
            other VCSs which have latency network overhead.
      dt    Git Has Integrity.
      dt    Git Generally Only Adds Data.
      dd    In Git, doing nearly all of actions, you only add data to the Git database.
      dd.
            It is very difficult to lose your data,
            especially if you regularly push your database to another repository.
      dd.
            Everything (files, dirs) in Git is check-summed before it's stored (to GIT) and
            is then referred to by that checksum.
      dd    This means it’s impossible to change the contents without Git knowing about it.
      dd    Git hash-mechanism: SHA-1
      dd    Git stored snapshots in DB by the hash.
    
    h1      2.      Git Basics.
    H2(data-toggle="collapse" data-target="#21"  aria-controls="21").
            2.1.     Getting a Git Repository
    div(id="21").collapse
      p.
      dt   Git initializing in an Existing Directory
      dd    Init in a current directory: [$ git init]
      dt   Cloning an Existing Repository.
      dd    You clone a repository with: [$ git clone [url]].
    H2(data-toggle="collapse" data-target="#22"  aria-controls="22").
            2.2.    Recording Changes to the Repository
    div(id="22").collapse
      dt    Recording Changes to the Repository
      dd
        p   Current dir - directory where git had initialized.
        ul  Each file in the current directory may have two states:
          ul
            li     untracked(не отслеживаемые)
            li     tracked  (отслеживаемые, in last snapshot)
        ul   Tracked files are files that were of the last snapshot; their states:
          ul
            li unmodified
            li modified
            li staged
      dt    Checking the Status of Your Files
      dd        Check status of files in current dir: [$ git status]
      dt     Tracking New Files
      dd        Begin tracking new file:[ $ git add [file]]
      dt    Staging Modified Files
      dd        Git add is a multipurpose command – you use it to begin tracking new files,
      dd        to stage files, and to do other things like marking merge-conflicted files as resolved.
      dt    Ignoring Files
      dd        See .gitignore
      dt    Viewing Your Staged and Unstaged Changes
      dd        [$ git diff] - shows you the exact lines added and removed – the patch, as it were.
      dt    Removing Files
      dd.
            Command: [$ git rm [file | dir]]
            This command simply delete tracked file.
      dt   Moving Files (Renaming)
      dd.
            If you want to rename a file in Git, you can run something like:
            [$ git mv file_from file_to]
    H2(data-toggle="collapse" data-target="#23"  aria-controls="23").
            2.3.   Viewing the Commit History.
    div(id="23").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History").
            Viewing the Commit History
      dd    To do this you need type the [$ git log] command.
      dd    One of the more helpful options is [-p], which shows the difference introduced in each commit.
      dd    You can also use [-2], which limits the output.
      dd    If you want to see some abbreviated stats for each commit, you can use the [--stat] option.
      dd    Another really useful option is [--pretty=oneline|short|full|fuller|format:]
      dd    Show graph: [$ git log --graph]
      dd    e.g.: [$ git log --pretty=format:"%h - %an, %ar : %s"]
      dd    More info available on the above link.
      dd    To see only the commits of a certain author: git log --author=bob
      dd    Different between committer and author is the author is the person who originally wrote the work,
      dd    whereas the committer is the person who last applied the work.
      dt    Limiting Log Output
      dd.
            With: [-n] where n is any integer to show the last n commits.
            The time-limiting options such as --since and --until.
            See other command in reference.
    H2(data-toggle="collapse" data-target="#24"  aria-controls="24").
            2.4.    Undoing Things
    div(id="24").collapse
      dt    Undoing Things
      dd    [$ git commit --amend]
      dt    Unstaging a Staged File
      dd    To unstage content in current dir, you can use: [$ git reset HEAD <file>] command:
      dt    Unmodifying a Modified File
      dd    You can replace local changes using the command:
      dd    [$ git checkout -- [file]] - be careful - is a dangerous command.
      dd    This kept files already added to the index,(new files).
      dd    Remember, anything that is committed in Git can almost always be recovered.
      dd.
            If you instead want to drop all your local changes, use:
            [$ git fetch origin]. It fetch the latest history
            from the server and point your local master branch.
    H2(data-toggle="collapse" data-target="#25"  aria-controls="25").
            2.5.     Working with Remotes
    div(id="25").collapse
      dd    Remote repositories are versions of your project
      dd    that are hosted on the Internet or network somewhere.
      dd    Remotes enable you collaborate on any project remotely.
      dd    It is them porpose.
      dt    Showing Your Remotes
      dd    To see which remote servers you have configured, you can run the [$ git remote]
      dt    Adding Remote Repositories
      dd    [$ git remote add [shortname] [url]]
      dt    Fetching and Pulling from Your Remotes
      dd    As you just saw, to get data from your remote projects,
      dd    you can run:[$ git fetch [remote-name]]
      dd    For example, if you want to fetch all the information that remote repo has
      dd    but that you don’t yet have in your repository, you can run [$ git fetch [shortname]]
      dd    If you have a branch set up to track a remote branch, you can use
      dd    the [$ git pull] command to automatically fetch and then merge a remote branch into your current branch.
      dt    Pushing to Your Remotes
      dd    When you have your project at a point that you want to share,
      dd    you have to push it upstream. The command for this is simple:
      dd    [git push [remote-name] [branch-name]]
      dt    Inspecting a Remote
      dd    If you want to see more information about a particular remote:
      dd    [$ git remote show [remote-name] ]
    H2(data-toggle="collapse" data-target="#26"  aria-controls="26").
            2.6.    Tagging
    div(id="26").collapse
      h2
      dt    Tagging
      dd      Typically people use this functionality to mark release points (v1.0, and so on).
      dt    Listing Your Tags
      dd      [$ git tag]
      dd    You can also search for tags with a particualar pattern like this
      dd    [$ git tag -l 'v1.*']
      dt    Creating Tags
      dd    Git uses two main types of tags:
        li      lightweight
        li      annotated.
      dd    A lightweight tag is very much like a branch that doesn’t change – it’s just a pointer to a specific commit.
      dd    Annotated tags, are stored as full objects in the Git database
      dd    (including the tagger name, e-mail, date;
      dd    a tagging message; and can be signed / verified with GNU Privacy Guard (GPG).)
      dt    Annotated Tags
      dd    The easiest way is to specify [-a | -m | -s ]: [$ git -a ]
      dd    e.g.: [$ git tag -a v.1.4 - 'my version 1.4']
      dd    To see tag data along with commit that was tagged, use: [$ git show [tagname]]
      dt    Lightweight Tags
      dd    To create a lightweight tag, don’t supply the -a, -s, or -m option, i.e:
      dd    [$ git tag v1.4-lw]
      dt    Tagging later
      dd    [$ git tag -a [tagName] [commit]] i.e.:
      dd    [$ git tag -a v1.2 9fceb02]
      dt    Sharing Tags
      dd    Just run: [$ git push origin [tagname]
      dd    By default the [$ git push] command doesn’t transfer tags to remote servers.
      dd    To push up at once a lot of tags you can use the:[$ git push --tags]
      dt    Checking out Tags
      dd    You can create a new branch at a specific tag:[$ git checkout -b [branchname] [tag(v.2 etc)]]
    H2(data-toggle="collapse" data-target="#27"  aria-controls="27").
            2.7.	Git Aliases
    div(id="27").collapse
      dd    You can easily set up an alias for each command using git config:
      dd    [$ git config --global alias.[nameOfNewCommand] ["git.command]"]
      dd    i.e.: [$ git config --global alias.co checkout]
      dd    However, maybe you want to run an external command
      dd    you start the command with a ! character.
      dd    e.g.: [$ git config --global alias.visual "!gitk"]
    
    h1      3. Git Branching
    H2(data-toggle="collapse" data-target="#31"  aria-controls="31").
            3.1.	Branching in a Nutshell.
    div(id="31").collapse
      dd    Branching means you diverge from the main line of development
      dd    and continue to do work without messing with that main line.
      dt    Branching in a Nutshell
      dd    When you make a commit, Git stores a commit object that
      dd    contains a pointer to the snapshot of the content you staged.
      dt    Creating a New Branch
      dd    [$ git branch [branch name]]
      dd    How does Git know what branch you’re currently on?
      dd    It keeps a special pointer called HEAD.
      dd    Note that this is a lot different than the concept of HEAD
      dd    in other VCSs you may be used to, such as Subversion or CVS.
      dd    The git branch command only created a new branch – it didn’t switch to that branch.
      br
      dd    To see where the point of your HEAD, use:
      dd    [$ git log --oneline --decorate]
      dd    [$ git checkout [branch name]]
      dd    That command did two things.
      dd    It moved the HEAD pointer back to point to the [branch name] branch,
      dd    and it reverted the files in your working directory
      dd    back to the snapshot that master points to.
      dd    [git log --oneline --decorate --graph --all]
    H2(data-toggle="collapse" data-target="#32"  aria-controls="32").
            3.2.	Basic Branching and Merging
    div(id="32").collapse
      dt    Basic Branching and Merging
      dd    At this stage, you’ll receive a call that another issue
      dd    is critical and you need a hotfix. You’ll do the following:
        ol
          li Switch to your production branch.
          li Create a branch to add the hotfix.
          li After it’s tested, merge the hotfix branch, and push to production.
          li Switch back to your original story and continue working.
      dt    Basic Merging
      dd    It’s worth pointing out that Git determines the best common ancestor to use
      dd    for its merge base; this is different than older tools like CVS or Subversion (before version 1.5)
    h2(data-toggle="collapse" data-target="#33"  aria-controls="33").
            3.3.	Branch Management
    div(id="33").collapse
      dd    Notice the <b>*</b> indicates the branch (HEAD) that you currently have checked out .
      dd    See last commit on each branch: [$ git branch -v]
    h2(data-toggle="collapse" data-target="#34"  aria-controls="34").
            3.3.	Branching Workflows
    div(id="34").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows#Long-Running-Branches").
            Long-Running Branches
      dd    This means you can have several branches that are always open (ie master) and
      dd    that you use for different stages of your development cycle;
      dd    you can merge regularly from some of them into others.
      dt
      dt
        a(href="http://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows#Topic Branches").
            Topic Branches
      dd    Topic branches, however, are useful in projects of any size.
      dd    A topic branch is a short-lived branch that you create and
      dd    use for a single particular feature or related work.
      dd    A topic branch is a short-lived branch that you create and
      dd    for a single particular feature or related work.
    h2(data-toggle="collapse" data-target="#35"  aria-controls="35").
            3.5.	Remote Branches
    div(id="35").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/Git-Branching-Remote-Branches") Remote Branches
      dd    Remote branches are references (pointers) to the state of branches in your remote repositories.
      dd    They’re local branches that you can’t move;
      dd    they’re moved automatically for you whenever you do any network communication.
      dt
        a(href="http://git-scm.com/book/en/v2/Git-Branching-Remote-Branches#Tracking-Branches") Tracking Branches
      dd    Checking out a local branch from a remote branch automatically creates what is called
      dd    a “tracking branch” (or sometimes an “upstream branch”).
      dd    Tracking branches are local branches that have a direct relationship to a remote branch.
      dt
        a(href="http://git-scm.com/book/en/v2/Git-Branching-Remote-Branches#Deleting-Remote-Branches") Deleting Remote Branches
      dd    If you want to delete your branch from the server, you run the following:
      dd    [$ git push [remote name] --delete [branch name]]
    h2(data-toggle="collapse" data-target="#36"  aria-controls="36").
            3.6.	Rebasing
    div(id="36").collapse
      dd    In Git, there are two main ways to integrate changes from one branch into another:
        ol
          li the merge
          li the rebase.
      dt    The Basic Rebase
      dd    There is no difference in the end product (in comparing with merge tool)
      dd    of the integration, but rebasing makes for a cleaner history.
      dt
        a(href="http://git-scm.com/book/en/v2/Git-Branching-Rebasing#The-Basic-Rebase") The Basic Rebase
      dd
        |   Commands:
        |   [$ git
        a(href="http://git-scm.com/docs/git-rebase")    rebase
        |   --onto <newbase>]
      dt
        a(href="http://git-scm.com/book/en/v2/Git-Branching-Rebasing#The-Perils-of-Rebasing") The Perils of Rebasing
      dd Do not rebase commits that exist outside your repository.
      dt
        a(href="http://git-scm.com/book/en/v2/Git-Branching-Rebasing#Rebase-When-You-Rebase") Rebase When You Rebase

      dd
    


    h1      4. Git on the Server
    h2(data-toggle="collapse" data-target="#41"  aria-controls="41").
            4.1.	The Protocols
    div(id="41").collapse
      dd    Therefore, the preferred method for collaborating with someone
      dd    is to set up an intermediate repository that you both have access to, and push to and pull from that.
      dt    The Protocols
      dd    Git can use four major protocols to transfer data:
        ul
          li
            a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols#Local-Protocol") Local
          li
            a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols#The-HTTP-Protocols") HTTP
          li
            a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols#The-SSH-Protocol") Secure Shell (SSH)
          li
            a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols#The-Git-Protocol") Git
      dd
    h2(data-toggle="collapse" data-target="#42"  aria-controls="42").
            4.2. Getting Git on a Server
    div(id="42").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server") Getting Git on a Server
      dd    In order to initially set up any Git server,
      dd    you have to export an existing repository into a new bare repository –
      dd    a repository that doesn’t contain a working directory.
      dd    This is generally straightforward to do.
      dd    By convention, bare repository directories end in .git
      dd    In order to clone repo, you run clone command with --bare:
      dd    [$ git clone --bare [url to repo] [cloned repo name].git ]
      dd    This is roughly equivalent to something like
      dd    [$ cp -Rf my_repo/.git my_local_repo.git]
      dd    Git will automatically add group write permissions to a repository properly
      dd    if you run the git init command with the --shared option:
      dd    [$ git init --bare --shared]

      dt
        a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server#Putting-the-Bare-Repository-on-a-Server").
            Putting the Bare Repository on a Server

      dd    Let’s say you’ve set up a server called git.example.com
      dd    Further you can set up your new repository by copying your bare repository over:
      dd    [$ scp -r my_project.git user@git.example.com:[/path/to/new/repo]]
      dd    After all, now, user's who have SSH acsess to the same serve
      dd    can clone your repository by running
      dd    [$ git clone user@git.example.com:[/path/to/new/repo].git]
      dt
        a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server#Small-Setups").
          Small Setups
      dd    One of the most complicated aspects of setting up a Git server is user management.
      dt    SSH Access
      dd    There are a few ways you can give access to everyone on your team:
        ul
          li  Just set up accounts (obviously system) for everybody.
          li.
              Create a signle git user on the machine and ask every user who
              is to have write access to send you an SSH public key,
              and add that key to the ~/.ssh/authorized_keys
          li.
              Another way to do it is to have your SSH server
              authenticate from an LDAP server or some other
              centralized authentication source that you may already have set up.


    h2(data-toggle="collapse" data-target="#43"  aria-controls="43").
            4.3. Generating Your SSH Public Key
    div(id="43").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key") Generation SSH key
      dd    First, you should check to make sure you don’t already have a key.
      dd    By default, a user's SSH key are stored in that user's ~/.ssh directory
      dd    and key's files named like id_dsa or id_rsa and a matching file with a
      dd    .pub extension.
      dd    If you don't have these files, you can create them by program called ssh-keygen:
      dd    [$ ssh-keygend -t rsa -C "your@email.com"];
      dd    which  provided on almost all current system platform (Linux/Mac, on NT with MSysGit package).
      dd    Now, each user that does this has to send their public key to the Git server
      dd    (assuming you’re using an SSH server setup that requires public keys).
      dd    All they have to do is compy the content of the .pub file and send it.
      dt
        a(href="https://help.github.com/articles/generating-ssh-keys.") GitHub article
      dd    Click to open up help for SSH key generation on GitHub Help service.



    h2(data-toggle="collapse" data-target="#44"  aria-controls="44").
            4.4. Setting Up the Server
    div(id="44").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server") Setting Up the Server
      dd    First, you create (on Nix-systems - you also should create a git user) a .ssh directory for that user.
      dd    Next, you need to add some developer SSH public keys to the ~/.ssh/authorized_keys directory.
      dd    Now, you can set up an empty repository.

    h2(data-toggle="collapse" data-target="#45"  aria-controls="45").
            4.5. Git Daemon
    div(id="45").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-Git-Daemon") Git Daemon
      dd    In any case, the Git protocol is relatively easy to set up.
      dd    Basically, you need to run this command in a daemonized manner:
      dd    Remember that since it’s not an authenticated service,
      dd    anything you serve over this protocol is public within its network.
      dd    --reuseaddr allows the server to restart without waiting for old connections to time out
      dd    --base-path option allows people to clone projects without specifying the entire path
      dd    and the path at the end tells the Git daemon where to look for repositories to export.
      dd
    h2(data-toggle="collapse" data-target="#46"  aria-controls="46").
            4.6. Smart HTTP
    div(id="46").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-Smart-HTTP") Smart HTTP
      dd    Setting up Smart HTTP is basically just enabling
      dd    a CGI script that is provided with Git called [git-http-backend] on the server.
    h2(data-toggle="collapse" data-target="#47"  aria-controls="47").
            4.7. GitWeb
    div(id="47").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-GitWeb") GitWeb
      dd    Git comes with a CGI script called GitWeb that is
      dd    provided simple web-based visualizer.
    h2(data-toggle="collapse" data-target="#48"  aria-controls="48").
            4.8. GitLab
    div(id="48").collapse
      dd    If you’re looking for a more modern, fully featured Git server,
      dd    there are some several open source solutions out there that you can install instead.

      dt
        a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-GitLab#Installation") Installation
      dd    GitLab is a database-backed web application
      dd    To get something up and running quickly, you can download a virtual machine image or
      dd    a one-click installer from https://bitnami.com/stack/gitlab,
      dd    and tweak the configuration to match your particular environment.
    h2(data-toggle="collapse" data-target="#49"  aria-controls="49").
            4.9. Third Party Hosted Options
    div(id="49").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/Git-on-the-Server-Third-Party-Hosted-Options")
        |   Third Party Hosted Options
      dd    These days, you have a huge number of hosting options to choose from.
      dd    To see an up-to-date list, check out the GitHosting page on the main
        a(href="https://git.wiki.kernel.org/index.php/GitHosting")   Git wiki


    h1      5. Distributed Git
    h2(data-toggle="collapse" data-target="#51"  aria-controls="51").
            5.1. Distributed Workflows
    div(id="51").collapse
      dt    Distributed Workflows
      dd    Unlike another centralized VCS, GIT allows every developer to be
      dd    on both a node and a hub states.
      dd    So lets cover a few common paradigms of workflow:
      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows#Centralized-Workflow") Centralized Workflow
      dd
        img(src="http://www.shaney.net/git/images/centralized.png").img-responsive.img-rounded
      dd    One central hub, or repository, can accept code, and everyone synchronizes their work to it.
      dd    This is also not limited to small teams.

      hr
      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows#Integration-Manager-Workflow") Integration-Manager Workflow
      dd
        img(src="http://git-scm.com/book/en/v2/book/05-distributed-git/images/integration-manager.png").img-responsive.img-rounded
      dd
      dd    Because Git allows you to have multiple remote repositories,
      dd    it’s possible to have a workflow where each developer
      dd    has write access to their own public repository and read access to everyone else’s.
      dd    The process works as follows:
      dd
        ol
          li The project maintainer pushes to their public repository.
          li  A contributor clones that repository and makes changes.
          li  The contributor pushes to their own public copy.
          li  The contributor sends the maintainer an e-mail asking them to pull changes.
          li  The maintainer adds the contributor’s repo as a remote and merges locally.
          li  The maintainer pushes merged changes to the main repository.

      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows#Dictator-and-Lieutenants-Workflow") Dictator and Lieutenants Workflow
      dd
        img(src="http://git-scm.com/book/en/v2/book/05-distributed-git/images/benevolent-dictator.png").img-responsive.img-rounded

      dd    This is a variant of a multiple-repository workflow.
      dd    It’s generally used by huge projects with hundreds of collaborators;
      dd    Various integration managers are in charge of certain parts of the repository;
      dd    they’re called lieutenants.
      dd    All the lieutenants have one integration manager known as the benevolent dictator.
      dd    The process works like this:
        ol
          li Regular developers work on their topic branch and rebase their work on top of master. The master branch is that of the dictator.
          li Lieutenants merge the developers’ topic branches into their master branch.
          li The dictator merges the lieutenants’ master branches into the dictator’s master branch.
          li The dictator pushes their master to the reference repository so the other developers can rebase on it.
    h2(data-toggle="collapse" data-target="#52"  aria-controls="52").
      5.2. Contributing to a Project
    div(id="52").collapse
      dt    Contributing to a Project
      dd    The main difficulty with describing how to contribute to a project
      dd    is that there are a huge number of variations on how it’s done.
      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines").
            Commit Guidelines
      dd    Before we start looking at the specific use cases, here’s a quick note about commit messages.
      dd    First, you don’t want to submit any whitespace errors.
      dd    Before you commit, run [$ git diff --check] -
      dd    It is identifies possible whitespace errors and lists them for you.
      dd    Next, try to make each commit a logically separate changeset.
      dd    If you can, try to make your changes digestible – don’t code for a whole weekend on five different issues
      dd    and then submit them all as one massive commit on Monday.
      dd    The last thing to keep in mind is the commit message.
      dd    Here is a template originally written by Tim Pope:

      dd
        blockquote.text-whitespaces.
          Short (50 chars or less) summary of changes

          More detailed explanatory text, if necessary.  Wrap it to
          about 72 characters or so.  In some contexts, the first
          line is treated as the subject of an email and the rest of
          the text as the body.  The blank line separating the
          summary from the body is critical (unless you omit the body
          entirely); tools like rebase can get confused if you run
          the two together.

          Further paragraphs come after blank lines.

            - Bullet points are okay, too

            - Typically a hyphen or asterisk is used for the bullet,
            preceded by a single space, with blank lines in
            between, but conventions vary here
      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#Private-Small-Team").
            Private Small Team
      dd    Before pushing changes from your local repo at the
      dd    meantime as this doing another developers,
      dd    you need fetch remote changes and then merge with your.
      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#Private-Managed-Team").
            Private Managed Team
      dd    The ability of smaller subgroups of a team to collaborate via
      dd    remote branches without necessarily having to
      dd    involve or impede the entire team is a huge benefit of Git.
      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#Forked-Public-Project").
            Forked Public Project
      dd    [$ git merge --no-commit --squash]
      dd    The --squash option takes all the work on the merged branch
      dd    and squashes it into one non-merge commit on top of the branch you’re on.
      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#Public-Project-over-E-Mail").
            Public Project over E-Mail
      dd    You can generate e-mail versions of each commit series
      dd    and e-mail them to the developer mailing list
    h2(data-toggle="collapse" data-target="#53"  aria-controls="53").
      5.3. Maintaining a Project
    div(id="53").collapse
      dt    Contributing to a Project
      dd
      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project#Applying-Patches-from-E-mail").
            Applying Patches from E-mail
      dd
      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project#Checking-Out-Remote-Branches").
            Checking Out Remote Branches
      dd    The other advantage of this approach is that
      dd    you get the history of the commits as well.

      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project#Determining-What-Is-Introduced").
            Determining What Is Introduced
      dd    It’s often helpful to get a review of all the commits
      dd    that are in this branch but that aren’t in your master branch.
      dd    You can exclude commits in the master branch by
      dd    adding the [--not] option before the branch name.
      dd    This does the same thing as the [$ git log [branchname]..[branchname]] format that we used earlier.
      dd    What you really want to see are the changes added to the topic branch –
      dd    the work you’ll introduce if you merge this branch with master, you
      dd    can do: [$ git merge-base [branchname] [branchname]]
      dd    A bit more convenient: [$ git diff [branchname]...[branchname]]
      dd    This command shows you only the work your current topic branch has introduced since its common ancestor

      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project#Integrating-Contributed-Work").
            Integrating Contributed Work
      dd    Main question is which overall workflow do you want
      dd    to use to maintain your project? You have a number
      dd    of choices, so we’ll cover a few of them.

      dt    Merging Workflows
      dd    If you have a more important project, you might want to
      dd    use a two-phase merge cycle. In this scenario, you have two
      dd    long-running branches, master and develop, in which you
      dd    determine that master is updated only when a very stable
      dd    release is cut and all new code is integrated into the develop branch.

      dt    Large-Merging Workflows
      dt    Rebasing and Cherry Picking Workflows
      dd    he other way to move introduced work from one branch to another is
      dd    to [$ git cherry-pick [target for merging wiht that you're currently on]].
      dd    A cherry-pick in Git is like a rebase for a single commit.
      dd    It takes the patch that was introduced in a commit and tries to reapply it on the branch you’re currently on.

      dt    Rerere
      dd    If you’re doing lots of merging and rebasing, or you’re maintaining
      dd    a long-lived topic branch, Git has a feature called “rerere” that can help.
      dd    Rerere stands for “reuse recorded resolution” – it’s a way of shortcutting manual conflict resolution.
      dd    This feature comes in two parts: a configuration setting and a command.
      dd    The configuration setting is rerere.enabled:
      dd    [$ git config --global rerere.enabled true]
      dd    Now, whenever you do a merge that resolves conflicts,
      dd    the resolution will be recorded in the cache in case you need it in the future.

      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project#Tagging-Your-Releases").
            Tagging Your Releases

      dt    Generating a Build Number

      dt    Preparing a Release
      dd    One of the things you’ll want to do is create an archive of the latest snapshot
      dd    of your code for those poor souls who don’t use Git. The command to do this is git archive:
      dd    [$ git archive master --prefix='project/' | gzip > `git describe master`.tar.gz]

      dt
        a(href="http://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project#Tagging-Your-Releases").
            The Shortlog
      dd    It’s time to e-mail your mailing list of people who want to know what’s happening in your project.
      dd    A nice way of quickly getting a sort of changelog
      dd    is to use the [$ git shortlog]
      dd    It summarizes all the commits in the range you give it; for example:
      dd    [$ git shortlog --no-merges master --not v1.0.1                     ]



    h1  6. GitHub
    H2(data-toggle="collapse" data-target="#61"  aria-controls="61").
      6.1. Account Setup and Configuration
    div(id="61").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/GitHub-Account-Setup-and-Configuration").
            Account Setup and Configuration
      dd
      dt
        a(href="http://git-scm.com/book/en/v2/GitHub-Account-Setup-and-Configuration#Two-Factor-Authentication").
            Two Factor Authentication
      dd    If you click on the “Set up two-factor authentication” button,
      dd    it will take you to a configuration page where you can choose to use
      dd    a phone app to generate your secondary code (a “time based one-time password”),
      dd    or you can have GitHub send you a code via SMS each time you need to log in.
    H2(data-toggle="collapse" data-target="#61"  aria-controls="61").
      6.2. Contributing to a Project
    div(id="62").collapse
      dt
        a(href="http://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project").
            Forking Projects
      dd
      dt
        a(href="http://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project#The-GitHub-Flow").
            The GitHub Flow
      dd    GitHub is designed around a particular collaboration workflow, centered on Pull Requests.

      dt
      dd

      dt
      dd



    h1  Related terms
    H2(data-toggle="collapse" data-target="#Misc"  aria-controls="Misc").
      Misc
    div(id="Misc").collapse
      dt      GPG
      dd      - GNU Privacy Guard
      dd      HEAD  is the pointer that points to the current branch or any a commit.
      dd      todo: it's need to be revised
      dd      INDEX is the current state of files of repository which to be included to next commit
      dt      Useful hints:
      dd
        ol
          li  [$ gitk]                            - built-in git GUI
          li  [$ git config color.ui true]        - use colorful git output
          li  [$ git config format.pretty oneline]- show log on just one line per commit
          li  [$ git add -i]                      - use interactive adding
          li  [$ git gui]
      dt      Other
      dd
        ul
          li   adding for tracking(or staging) : git add [dir]
          li   dChecking status                : git status
          li   dChecking status (short)        : git status -s

      dt      git-shell
      dd      It is the shell that used instead the default system platform (bash) shell
      dd      to the git-server authorization process. (chapter 4.4.)
      dd      For security reasons.

    script(src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js")
    script(src="js/bootstrap.min.js")
    h1.text-color-black .