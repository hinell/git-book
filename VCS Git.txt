VCS GIT. Based on http://git-scm.com/book/en/v2

Temp:
Chapter
	Part Chapter along with Header
	Paragraph
		Body of.

1.      Getting started.
1.3.    Git Basics.
		Snapshots.
			Every time you commit, or save the state of your project in Git,
			it basically takes a picture of what all your files look like at that moment
			and stores a reference to that snapshot (if files have not changed,
			Git doesn't store the file again (like others VCSs),
			just a link to the previous identical file it has already stored.)
			Git thinks about its data more like a stream of snapshots.

		Nearly Every Operation Is Local.
			Git only need local files and resources to operate unlike
			other VCSs which have latency network overhead.

		Git Has Integrity.
		Git Generally Only Adds Data.
			In Git, doing nearly all of actions, you only add data to the Git database.
			It is very difficult to lose your data, especially if you regularly push your database to another repository.
			Everything (files, dirs) in Git is check-summed before it's stored (to GIT) and
			is then referred to by that checksum.
			This means it’s impossible to change the contents without Git knowing about it.
			Git hash-mechanism: SHA-1
			Git stored snapshots in DB by the hash.


2.      Git Basics.
2.1     Getting a Git Repository
		Git initializing in an Existing Directory
			Init in a current directory: $ git init
		Cloning an Existing Repository.
			You clone a repository with: $ git clone [url].

2.2.    Recording Changes to the Repository
		Recording Changes to the Repository
			Current dir - directory where git had initialized.
			Each file in the current directory may have two states:
				untracked(не отслеживаемые)
				tracked  (отслеживаемые, in last snapshot)
			Tracked files are files that were of the last snapshot; their states:
			    unmodified
			    modified
			    staged

		Checking the Status of Your Files
			Check status of files in current dir: $ git status
		Tracking New Files
			Begin tracking new file: $ git add [file]
		Staging Modified Files
			git add is a multipurpose command – you use it to begin tracking new files,
			to stage files, and to do other things like marking merge-conflicted files as resolved.
		Removing Files
			Command: $ git rm [file | dir]
			This command simply delete tracked file.

		Moving Files (Renaming)
			If you want to rename a file in Git, you can run something like:
			$ git mv file_from file_to

2.3.    Viewing the Commit History


My notes.
		Index - is the current state of files in the current dir for next commit.
		In other words: index - is a last snapshot of files in the current dir.
		adding for tracking(or staging) : git add [dir]
		dChecking status                : git status
		dChecking status (short)        : git status -s



